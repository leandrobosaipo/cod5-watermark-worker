"""Pipeline de processamento de v√≠deo: YOLO + LAMA + FFmpeg."""
import os
import tempfile
import logging
from pathlib import Path
from typing import Dict, Any, Optional
import cv2
import numpy as np
from ultralytics import YOLO
import torch

from .config import settings
from .storage import storage
from .status import status_manager
from .utils import get_timestamp

logger = logging.getLogger(__name__)

# Lazy loading do modelo YOLO
_yolo_model: Optional[YOLO] = None


def get_yolo_model() -> YOLO:
    """Carrega modelo YOLO (lazy loading)."""
    global _yolo_model
    if _yolo_model is None:
        model_path = settings.YOLO_MODEL_PATH
        if not os.path.exists(model_path):
            logger.error(f"‚ùå MODEL: Modelo YOLO n√£o encontrado | Path: {model_path}")
            raise FileNotFoundError(f"Modelo YOLO n√£o encontrado: {model_path}")
        
        try:
            # Verifica vers√£o do ultralytics antes de carregar
            import ultralytics
            uv_version = ultralytics.__version__
            logger.info(f"ü§ñ LOADING: Carregando modelo YOLO | Ultralytics: {uv_version} | Path: {model_path}")
            
            # Tenta carregar o modelo
            _yolo_model = YOLO(model_path)
            logger.info(f"‚úÖ MODEL: Modelo YOLO carregado com sucesso | Path: {model_path}")
        except AttributeError as e:
            if 'C3k2' in str(e):
                # Captura vers√£o instalada para diagn√≥stico
                try:
                    import ultralytics
                    installed_version = ultralytics.__version__
                except:
                    installed_version = "desconhecida"
                
                error_msg = (
                    f"ERRO DE COMPATIBILIDADE C3k2:\n"
                    f"O modelo {model_path} requer uma vers√£o do ultralytics com m√≥dulo C3k2.\n"
                    f"Vers√£o instalada: {installed_version}\n"
                    f"Esta vers√£o N√ÉO tem o m√≥dulo C3k2 necess√°rio.\n"
                    f"Erro: {e}\n"
                    f"Solu√ß√µes poss√≠veis:\n"
                    f"1. Reconstrua com Dockerfile atualizado (testa m√∫ltiplas vers√µes)\n"
                    f"2. O start.sh tentar√° vers√µes alternativas automaticamente\n"
                    f"3. Vers√µes a testar: 8.0.0, 8.0.100, 8.0.20, 8.0.10"
                )
                logger.error(error_msg)
                raise RuntimeError(error_msg) from e
            raise
        except Exception as e:
            # Captura vers√£o para diagn√≥stico
            try:
                import ultralytics
                installed_version = ultralytics.__version__
                logger.error(f"Vers√£o ultralytics: {installed_version}")
            except:
                pass
            logger.error(f"Erro ao carregar modelo YOLO: {e}")
            raise
    
    return _yolo_model


def detect_watermarks(
    frame: np.ndarray,
    conf: float,
    iou: float,
    device: str
) -> list:
    """
    Detecta marcas d'√°gua em um frame usando YOLO.
    
    Returns:
        Lista de bounding boxes [(x1, y1, x2, y2), ...]
    """
    model = get_yolo_model()
    results = model(frame, conf=conf, iou=iou, device=device, verbose=False)
    
    boxes = []
    for result in results:
        if result.boxes is not None:
            for box in result.boxes:
                # Converte para coordenadas (x1, y1, x2, y2)
                x1, y1, x2, y2 = box.xyxy[0].cpu().numpy()
                boxes.append((int(x1), int(y1), int(x2), int(y2)))
    
    return boxes


def expand_mask(boxes: list, expand_px: int, frame_shape: tuple) -> np.ndarray:
    """
    Cria m√°scara expandida a partir de bounding boxes.
    
    Args:
        boxes: Lista de (x1, y1, x2, y2)
        expand_px: Pixels para expandir
        frame_shape: (height, width) do frame
    
    Returns:
        M√°scara bin√°ria (uint8)
    """
    h, w = frame_shape[:2]
    mask = np.zeros((h, w), dtype=np.uint8)
    
    for x1, y1, x2, y2 in boxes:
        # Expande caixa
        x1 = max(0, x1 - expand_px)
        y1 = max(0, y1 - expand_px)
        x2 = min(w, x2 + expand_px)
        y2 = min(h, y2 + expand_px)
        
        # Preenche regi√£o na m√°scara
        mask[y1:y2, x1:x2] = 255
    
    return mask


def inpaint_frame_lama(frame: np.ndarray, mask: np.ndarray) -> np.ndarray:
    """
    Aplica inpainting em um frame usando algoritmo LAMA (OpenCV).
    
    Nota: Para LAMA completo, seria necess√°rio instalar lama-cleaner.
    Aqui usamos cv2.INPAINT_TELEA como fallback.
    """
    # OpenCV inpainting (m√©todo r√°pido)
    result = cv2.inpaint(frame, mask, 3, cv2.INPAINT_TELEA)
    
    # TODO: Se necess√°rio, integrar lama-cleaner real:
    # from lama_cleaner.model_manager import ModelManager
    # from lama_cleaner.schema import Config
    # ...
    
    return result


def extract_frames(video_path: str, output_dir: str, stride: int = 1) -> tuple[int, list[str]]:
    """
    Extrai frames do v√≠deo usando FFmpeg.
    
    Args:
        video_path: Caminho do v√≠deo
        output_dir: Diret√≥rio de sa√≠da
        stride: Intervalo entre frames (1 = todos)
    
    Returns:
        (total_frames, lista_de_caminhos)
    """
    import ffmpeg
    import subprocess
    
    # Obt√©m informa√ß√µes do v√≠deo
    probe = ffmpeg.probe(video_path)
    video_info = next(s for s in probe['streams'] if s['codec_type'] == 'video')
    fps = eval(video_info['r_frame_rate'])
    duration = float(video_info.get('duration', 0))
    total_frames = int(duration * fps)
    
    # Cria diret√≥rio se n√£o existir
    os.makedirs(output_dir, exist_ok=True)
    
    # Extrai frames
    frame_pattern = os.path.join(output_dir, 'frame_%06d.png')
    
    # FFmpeg command
    # Nota: O FFmpeg espera: select='not(mod(n\,5))' onde 5 √© o stride
    # O problema relatado: escapes duplos causam erro de parsing no FFmpeg
    # Solu√ß√£o: usar apenas uma barra na string (Python \\ produz \ na string)
    # mas o ffmpeg-python pode escapar novamente. Vamos usar uma string raw ou
    # construir de forma que o resultado final tenha apenas uma barra
    # Usa subprocess diretamente para evitar problemas de escape do ffmpeg-python
    # O ffmpeg-python pode adicionar escapes extras ao passar filtros com v√≠rgulas
    
    try:
        # Constr√≥i comando FFmpeg diretamente
        cmd = ['ffmpeg', '-i', video_path, '-vsync', '0', '-qscale:v', '2']
        
        if stride > 1:
            # Adiciona filtro select: select='not(mod(n\,{stride}))'
            # Passamos a express√£o diretamente ao FFmpeg, sem escapes extras
            select_filter = f"select='not(mod(n\\,{stride}))'"
            cmd.extend(['-vf', select_filter])
        
        cmd.extend(['-y', frame_pattern])  # -y para overwrite
        
        # Executa comando
        result = subprocess.run(
            cmd,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            check=True
        )
        
        logger.debug(f"FFmpeg extraiu frames com sucesso (stride={stride})")
            
    except subprocess.CalledProcessError as e:
        error_msg = e.stderr.decode('utf-8', errors='ignore') if e.stderr else str(e)
        logger.error(f"Erro FFmpeg ao extrair frames: {error_msg}")
        logger.error(f"Comando: {' '.join(cmd)}")
        logger.error(f"Stride: {stride}")
        raise RuntimeError(f"Falha ao extrair frames do v√≠deo: {error_msg}")
    except Exception as e:
        logger.error(f"Erro inesperado ao extrair frames: {e}")
        raise
    
    # Lista frames extra√≠dos
    frame_files = sorted(Path(output_dir).glob('frame_*.png'))
    actual_count = len(frame_files)
    
    return actual_count, [str(f) for f in frame_files]


def render_video(
    frames_dir: str,
    output_path: str,
    audio_source: Optional[str] = None,
    fps: float = 30.0
) -> None:
    """
    Renderiza frames em v√≠deo usando FFmpeg.
    
    Args:
        frames_dir: Diret√≥rio com frames (frame_%06d.png)
        output_path: Caminho de sa√≠da
        audio_source: V√≠deo original (para copiar √°udio)
        fps: FPS do v√≠deo
    """
    import ffmpeg
    
    # FFmpeg espera padr√£o frame_000001.png, frame_000002.png, etc.
    frame_pattern = os.path.join(frames_dir, 'frame_%06d.png')
    
    # Stream de v√≠deo a partir de sequ√™ncia de imagens
    # Usa start_number para come√ßar do frame_000001.png
    video = ffmpeg.input(frame_pattern, framerate=fps, start_number=1)
    
    try:
        if audio_source and os.path.exists(audio_source):
            # Copia √°udio do v√≠deo original
            audio = ffmpeg.input(audio_source).audio
            output = ffmpeg.output(
                video,
                audio,
                output_path,
                vcodec='libx264',
                acodec='copy',
                pix_fmt='yuv420p',
                **{'shortest': None}  # Para sincronizar com √°udio
            )
        else:
            # V√≠deo sem √°udio
            output = ffmpeg.output(video, output_path, vcodec='libx264', pix_fmt='yuv420p')
        
        output.overwrite_output().run(quiet=True, capture_stderr=True)
    except ffmpeg.Error as e:
        logger.error(f"Erro FFmpeg ao renderizar v√≠deo: {e.stderr.decode() if e.stderr else str(e)}")
        raise


def process_video(task_id: str, spaces_key: str, params: Dict[str, Any]) -> Dict[str, Any]:
    """
    Pipeline completo de processamento de v√≠deo.
    
    Args:
        task_id: ID da tarefa
        spaces_key: Chave do v√≠deo no Spaces (uploads/task_id.mp4)
        params: Par√¢metros (conf, mask_expand, frame_stride, webhook_url, etc.)
    
    Returns:
        Dict com resultados
    """
    import time
    start_time = time.time()
    
    try:
        logger.info("=" * 80)
        logger.info(f"üé¨ PROCESS: Iniciando processamento de v√≠deo | task_id={task_id}")
        logger.info(f"   Spaces Key: {spaces_key}")
        
        # Atualiza status: processing
        status_manager.update(
            task_id,
            status="processing",
            stage="downloading",
            progress=5,
            log_excerpt="Baixando v√≠deo do Spaces..."
        )
        logger.info(f"üì• DOWNLOAD: Baixando v√≠deo do Spaces... | task_id={task_id}")
        
        # Configura√ß√µes efetivas
        conf = settings.validate_yolo_conf(params.get('override_conf'))
        iou = settings.validate_yolo_iou()
        # Garante que mask_expand n√£o seja None ou 0 quando n√£o especificado
        override_mask_expand = params.get('override_mask_expand')
        mask_expand = override_mask_expand if override_mask_expand is not None else settings.MASK_EXPAND
        # Valida que mask_expand seja um n√∫mero positivo
        mask_expand = max(0, int(mask_expand)) if mask_expand is not None else settings.MASK_EXPAND
        
        override_frame_stride = params.get('override_frame_stride')
        frame_stride = max(1, int(override_frame_stride)) if override_frame_stride is not None else settings.FRAME_STRIDE
        device = settings.validate_device()
        
        logger.info(
            f"‚öôÔ∏è  CONFIG: Configura√ß√µes de processamento | "
            f"conf={conf} | iou={iou} | mask_expand={mask_expand} | "
            f"frame_stride={frame_stride} | device={device} | task_id={task_id}"
        )
        
        status_manager.update(
            task_id,
            params_effective={
                "yolo_conf": conf,
                "yolo_iou": iou,
                "mask_expand": mask_expand,
                "frame_stride": frame_stride,
                "torch_device": device
            },
            model_used="YOLOv11s + LAMA-big"
        )
        
        # Cria diret√≥rios tempor√°rios
        with tempfile.TemporaryDirectory() as temp_dir:
            # Download do Spaces
            local_video = os.path.join(temp_dir, f"{task_id}.mp4")
            download_start = time.time()
            storage.download_file(spaces_key, local_video)
            download_duration = time.time() - download_start
            logger.info(f"‚úÖ DOWNLOAD: V√≠deo baixado | Duration: {download_duration:.2f}s | task_id={task_id}")
            
            # Extra√ß√£o de frames
            status_manager.update(
                task_id,
                stage="extracting",
                progress=10,
                log_excerpt="Extraindo frames do v√≠deo..."
            )
            logger.info(f"üéûÔ∏è  EXTRACT: Iniciando extra√ß√£o de frames... | task_id={task_id}")
            
            frames_dir = os.path.join(temp_dir, "frames")
            os.makedirs(frames_dir, exist_ok=True)
            
            # Obt√©m FPS do v√≠deo original
            import ffmpeg
            probe = ffmpeg.probe(local_video)
            video_info = next(s for s in probe['streams'] if s['codec_type'] == 'video')
            fps = eval(video_info['r_frame_rate'])
            logger.info(f"üìä VIDEO_INFO: FPS detectado: {fps} | task_id={task_id}")
            
            extract_start = time.time()
            total_frames, frame_files = extract_frames(local_video, frames_dir, stride=frame_stride)
            extract_duration = time.time() - extract_start
            logger.info(
                f"‚úÖ EXTRACT: Frames extra√≠dos | "
                f"Total: {total_frames} | Stride: {frame_stride} | "
                f"Duration: {extract_duration:.2f}s | task_id={task_id}"
            )
            status_manager.update(
                task_id,
                frames_total=total_frames,
                frames_done=0,
                stage="detecting",
                progress=15,
                log_excerpt=f"Detectando marcas d'√°gua em {total_frames} frames..."
            )
            
            logger.info(f"üîç DETECT: Iniciando detec√ß√£o de marcas d'√°gua... | task_id={task_id}")
            
            # Processa cada frame
            processed_frames_dir = os.path.join(temp_dir, "processed_frames")
            os.makedirs(processed_frames_dir, exist_ok=True)
            
            # Detecta marcas em frames de amostra (primeiro, meio, √∫ltimo)
            # para capturar varia√ß√µes de posi√ß√£o
            all_boxes = []
            sample_indices = [0]
            if len(frame_files) > 1:
                sample_indices.append(len(frame_files) // 2)
            if len(frame_files) > 2:
                sample_indices.append(len(frame_files) - 1)
            
            logger.info(f"   Amostragem: {len(sample_indices)} frames | √çndices: {sample_indices} | task_id={task_id}")
            
            detect_start = time.time()
            for idx in sample_indices:
                sample_frame = cv2.imread(frame_files[idx])
                boxes = detect_watermarks(sample_frame, conf, iou, device)
                all_boxes.extend(boxes)
                logger.debug(f"   Frame {idx}: {len(boxes)} marca(s) detectada(s) | task_id={task_id}")
            
            detect_duration = time.time() - detect_start
            total_detections = len(all_boxes)
            
            # Remove duplicatas pr√≥ximas (merge de boxes similares)
            if not all_boxes:
                logger.warning(f"‚ö†Ô∏è  DETECT: Nenhuma marca d'√°gua detectada nos frames de amostra | task_id={task_id}")
            else:
                logger.info(
                    f"‚úÖ DETECT: Detec√ß√£o conclu√≠da | "
                    f"Total de detec√ß√µes: {total_detections} | "
                    f"Duration: {detect_duration:.2f}s | task_id={task_id}"
                )
            
            # Cria m√°scara base a partir de todas as detec√ß√µes
            if all_boxes:
                sample_frame = cv2.imread(frame_files[0])
                mask = expand_mask(all_boxes, mask_expand, sample_frame.shape)
            else:
                # Se n√£o detectou nada, cria m√°scara vazia
                sample_frame = cv2.imread(frame_files[0])
                mask = np.zeros((sample_frame.shape[0], sample_frame.shape[1]), dtype=np.uint8)
            
            # Inpainting e processamento
            status_manager.update(
                task_id,
                stage="inpainting",
                progress=20,
                log_excerpt="Aplicando inpainting nos frames..."
            )
            
            logger.info(f"üé® INPAINT: Iniciando inpainting em {len(frame_files)} frames... | task_id={task_id}")
            inpaint_start = time.time()
            
            for idx, frame_path in enumerate(frame_files):
                frame = cv2.imread(frame_path)
                if frame is None:
                    logger.warning(f"‚ö†Ô∏è  INPAINT: Erro ao ler frame | Path: {frame_path} | task_id={task_id}")
                    continue
                
                # Aplica inpainting
                cleaned = inpaint_frame_lama(frame, mask)
                
                # Salva frame processado (numera√ß√£o come√ßando em 1 para ffmpeg)
                output_frame_path = os.path.join(processed_frames_dir, f"frame_{idx+1:06d}.png")
                cv2.imwrite(output_frame_path, cleaned)
                
                # Atualiza progresso a cada 10 frames ou no √∫ltimo
                if (idx + 1) % 10 == 0 or (idx + 1) == len(frame_files):
                    progress = 20 + int((idx + 1) / len(frame_files) * 60)  # 20-80%
                    status_manager.update(
                        task_id,
                        frames_done=idx+1,
                        progress=progress,
                        log_excerpt=f"Frame {idx+1}/{len(frame_files)} processado..."
                    )
                    logger.info(f"   Progresso: {idx+1}/{len(frame_files)} frames ({progress}%) | task_id={task_id}")
            
            inpaint_duration = time.time() - inpaint_start
            logger.info(f"‚úÖ INPAINT: Inpainting conclu√≠do | Duration: {inpaint_duration:.2f}s | task_id={task_id}")
            
            # Renderiza√ß√£o
            status_manager.update(
                task_id,
                stage="rendering",
                progress=85,
                log_excerpt="Renderizando v√≠deo final..."
            )
            
            logger.info(f"üé¨ RENDER: Iniciando renderiza√ß√£o do v√≠deo final... | task_id={task_id}")
            render_start = time.time()
            
            output_video = os.path.join(temp_dir, f"{task_id}_clean.mp4")
            render_video(processed_frames_dir, output_video, audio_source=local_video, fps=fps)
            
            render_duration = time.time() - render_start
            video_size_mb = os.path.getsize(output_video) / (1024 * 1024)
            logger.info(
                f"‚úÖ RENDER: V√≠deo renderizado | "
                f"Size: {video_size_mb:.2f} MB | Duration: {render_duration:.2f}s | task_id={task_id}"
            )
            
            # Upload para Spaces
            status_manager.update(
                task_id,
                stage="uploading_output",
                progress=90,
                log_excerpt="Enviando v√≠deo processado para Spaces..."
            )
            
            logger.info(f"üì§ UPLOAD: Enviando v√≠deo processado para Spaces... | task_id={task_id}")
            upload_start = time.time()
            
            output_key = f"outputs/{task_id}_clean.mp4"
            output_url = storage.upload_file(output_video, output_key)
            
            upload_duration = time.time() - upload_start
            logger.info(
                f"‚úÖ UPLOAD: V√≠deo processado enviado | "
                f"URL: {output_url} | Duration: {upload_duration:.2f}s | task_id={task_id}"
            )
            
            # Finaliza
            total_duration = time.time() - start_time
            status_manager.update(
                task_id,
                status="completed",
                stage="finalizing",
                progress=100,
                spaces_output=output_url,
                message="Watermark removed successfully",
                log_excerpt="Processamento conclu√≠do!"
            )
            
            logger.info(
                f"‚úÖ SUCCESS: Processamento conclu√≠do com sucesso! | "
                f"Total duration: {total_duration:.2f}s | task_id={task_id}"
            )
            logger.info("=" * 80)
            
            # Webhook (opcional)
            webhook_url = params.get('webhook_url')
            if webhook_url:
                # Valida que webhook_url seja uma string v√°lida e uma URL v√°lida
                if isinstance(webhook_url, str) and webhook_url.strip() and webhook_url.lower() != 'string':
                    try:
                        from urllib.parse import urlparse
                        parsed = urlparse(webhook_url.strip())
                        if not parsed.scheme or not parsed.netloc:
                            logger.warning(f"‚ö†Ô∏è  WEBHOOK: URL inv√°lida ignorada | URL: {webhook_url} | task_id={task_id}")
                        else:
                            try:
                                import requests
                                status = status_manager.get(task_id)
                                logger.info(f"üì° WEBHOOK: Enviando webhook | URL: {webhook_url} | task_id={task_id}")
                                response = requests.post(
                                    webhook_url.strip(),
                                    json=status.to_dict() if status else {},
                                    timeout=10
                                )
                                logger.info(f"‚úÖ WEBHOOK: Webhook enviado | Status: {response.status_code} | task_id={task_id}")
                            except Exception as e:
                                logger.error(f"‚ùå WEBHOOK: Erro ao chamar webhook | URL: {webhook_url} | Erro: {e} | task_id={task_id}")
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è  WEBHOOK: Erro ao validar URL | URL: {webhook_url} | Erro: {e} | task_id={task_id}")
                else:
                    logger.warning(f"‚ö†Ô∏è  WEBHOOK: URL inv√°lida ou vazia ignorada | URL: {webhook_url} | task_id={task_id}")
            
            return {
                "success": True,
                "task_id": task_id,
                "output_url": output_url
            }
            
    except Exception as e:
        total_duration = time.time() - start_time if 'start_time' in locals() else 0
        logger.error("=" * 80)
        logger.error(f"‚ùå ERROR: Erro no processamento | task_id={task_id} | Duration: {total_duration:.2f}s")
        logger.error(f"   Exception: {type(e).__name__} | {str(e)}")
        logger.exception("   Stack trace completo:")
        logger.error("=" * 80)
        
        status_manager.update(
            task_id,
            status="error",
            progress=0,
            error_detail=str(e),
            message=f"Erro no processamento: {str(e)}",
            log_excerpt=f"Erro: {str(e)}"
        )
        
        # Webhook de erro (opcional)
        webhook_url = params.get('webhook_url')
        if webhook_url and isinstance(webhook_url, str) and webhook_url.strip() and webhook_url.lower() != 'string':
            try:
                from urllib.parse import urlparse
                parsed = urlparse(webhook_url.strip())
                if parsed.scheme and parsed.netloc:
                    try:
                        import requests
                        status = status_manager.get(task_id)
                        logger.info(f"üì° WEBHOOK: Enviando webhook de erro | URL: {webhook_url} | task_id={task_id}")
                        requests.post(
                            webhook_url.strip(),
                            json=status.to_dict() if status else {},
                            timeout=10
                        )
                    except Exception as e:
                        logger.error(f"‚ùå WEBHOOK: Erro ao chamar webhook de erro | Erro: {e} | task_id={task_id}")
            except Exception:
                pass
        
        raise

